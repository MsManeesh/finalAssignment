using MongoDB.Driver;
using NewsService.Models;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
namespace NewsService.Repository
{
    //Inherit the respective interface and implement the methods in
    // this class i.e NewsRepository by inheriting INewsRepository
    public class NewsRepository:INewsRepository
    {
        //define a private variable to represent News Database context
        NewsContext _newsContext;

        public NewsRepository(NewsContext newsContext)
        {
            _newsContext = newsContext;
        }
        
        /* Implement all the methods of respective interface asynchronously*/

        // CreateNews method should be used to create a new news. NewsId should be autogenerated and
        // must start with 101.This should create a new UserNews if not exists else should push 
        //new news entry into existing UserNews collection.

        public async Task<int> CreateNews(string userId, News news)
        {
            news.NewsId = 0;
            UserNews exist = await _newsContext.News.Find(x => x.UserId == userId).FirstOrDefaultAsync();
            if (exist == null)
            {
                news.NewsId = 101;
                UserNews userNews = new UserNews() { UserId = userId, NewsList = new List<News>() { news } };
                await _newsContext.News.InsertOneAsync(userNews);
            }
            else
            {
                news.NewsId = exist.NewsList.Max(x => x.NewsId) + 1;
                exist.NewsList.Add(news);
                await _newsContext.News.ReplaceOneAsync(x => x.UserId == userId, exist);
            }
            return news.NewsId == 0 ? -1 : news.NewsId;
        }
        //FindAllNewsByUserId method should be used to retreive all news for a user by userId
        public async Task<List<News>> FindAllNewsByUserId(string userId)
        {
            UserNews exist = await _newsContext.News.Find(x => x.UserId == userId).FirstOrDefaultAsync();
            if (exist != null)
            {
                return exist.NewsList;
            }
            else
            {
                return null;
            }
        }
        //DeleteNews method should be used to delete a news for a specific user
        public async Task<bool> DeleteNews(string userId, int newsId)
        {
            bool flag = false;
            UserNews user = await _newsContext.News.Find(x => x.UserId == userId).FirstOrDefaultAsync();
            if (user != null)
            {
                News news = user.NewsList.FirstOrDefault(x => x.NewsId == newsId);
                if (news != null)
                {
                    user.NewsList.Remove(news);
                    await _newsContext.News.ReplaceOneAsync(x => x.UserId == userId, user);
                    flag = true;
                }
            }
            return flag;

        }
        //IsNewsExist method is used to check news of individual userId exist or not
        public async Task<bool> IsNewsExist(string userId, string title)
        {
            UserNews exist = await _newsContext.News.Find(x => x.UserId == userId).FirstOrDefaultAsync();
            if (exist != null)
            {
                News data = exist.NewsList.FirstOrDefault(x => x.Title == title);
                if (data != null)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        // GetNewsById  method is used to get the news by userId
        public async Task<News> GetNewsById(string userId, int newsId)
        {
            UserNews exist = await _newsContext.News.Find(x => x.UserId == userId).FirstOrDefaultAsync();
            if (exist != null)
            {
                News data = exist.NewsList.FirstOrDefault(x => x.NewsId == newsId);
                return data;
            }
            else
            {
                return null;
            }
        }
        //AddOrUpdateReminder method is used to Add and update the reminder by userId and newsId
        public async Task<bool> AddOrUpdateReminder(string userId, int newsId, Reminder reminder)
        {
            UserNews exist = await _newsContext.News.Find(x => x.UserId == userId).FirstOrDefaultAsync();
            if (exist != null)
            {
                News data = exist.NewsList.FirstOrDefault(x => x.NewsId == newsId);
                if (data != null)
                {
                    data.Reminder = reminder;
                    foreach (News x in exist.NewsList)
                    {
                        if (x.NewsId == newsId)
                        {
                            x.Reminder = reminder;
                            break;
                        }

                    }
                    await _newsContext.News.ReplaceOneAsync(x => x.UserId == userId, exist);
                    return true;
                }

                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        //DeleteReminder method is used to Delete the created Reminder by userId
        public async Task<bool> DeleteReminder(string userId, int newsId)
        {
            UserNews exist = await _newsContext.News.Find(x => x.UserId == userId).FirstOrDefaultAsync();
            if (exist != null)
            {
                News data = exist.NewsList.FirstOrDefault(x => x.NewsId == newsId);
                if (data != null && data.Reminder != null)
                {
                    foreach (News x in exist.NewsList)
                    {
                        if (x.NewsId == newsId)
                        {
                            x.Reminder = null;
                            break;
                        }

                    }
                    await _newsContext.News.ReplaceOneAsync(x => x.UserId == userId, exist);
                    return true;
                }

                else
                    return false;
            }
            else
            {
                return false;
            }
        }
        //IsReminderExists method is used to check the Reminder Exist or not by userId
        public async Task<bool> IsReminderExists(string userId, int newsId)
        {
            News news = await GetNewsById(userId, newsId);
            if (news != null && news.Reminder != null)
                return true;
            else
                return false;
        }
    }
}
